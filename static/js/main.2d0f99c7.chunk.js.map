{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","App","useState","sortedList","setSortedList","isSortedAlphabetically","setIsSortedAlphabetically","isSortedByLength","setIsSortedByLength","isReversed","setIsReversed","className","onClick","preparedGoods","sort","good1","good2","localeCompare","reverse","type","length","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,WACjB,MAAoCC,mBAASF,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA4DF,oBAAS,GAArE,mBAAOG,EAAP,KAA+BC,EAA/B,KACA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KA0DA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QA5D8B,WACpC,IAAIP,EAAJ,CAIA,IAAMQ,EAAa,UAAOb,GAErBK,GACHQ,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAGvDP,GACFI,EAAcK,UAGhBV,GAAoB,GACpBF,GAA0B,GAC1BF,EAAcS,KA4CRM,KAAK,SACLR,UAAS,0BAAqBN,GAA0B,YAH1D,iCAQA,wBACEO,QAhDmB,WACzB,IAAIL,EAAJ,CAIA,IAAMM,EAAa,UAAOb,GAErBO,GACHM,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMK,OAASJ,EAAMI,UAGxDX,GACFI,EAAcK,UAGhBZ,GAA0B,GAC1BE,GAAoB,GACpBJ,EAAcS,KAgCRM,KAAK,SACLR,UAAS,6BAAwBJ,GAAoB,YAHvD,4BAQA,wBACEK,QApCc,WACpB,IAAMC,EAAa,YAAOV,GAE1BU,EAAcK,UACdR,GAAeD,GACfL,EAAcS,IAgCRM,KAAK,SACLR,UAAS,6BAAwBF,GAAc,YAHjD,qBAQEJ,GAA0BE,GAAoBE,EAE5C,wBACEG,QAtCQ,WAClBR,EAAc,GAAD,OAAKJ,IAElBM,GAA0B,GAC1BE,GAAoB,GACpBE,GAAc,IAkCJS,KAAK,SACLR,UAAU,4BAHZ,mBAQA,QAIN,6BACGR,EAAWkB,KAAI,SAAAC,GAAI,OAAK,oBAAI,UAAQ,OAAZ,SAAoBA,aCtHrDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2d0f99c7.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const [sortedList, setSortedList] = useState(goodsFromServer);\n  const [isSortedAlphabetically, setIsSortedAlphabetically] = useState(false);\n  const [isSortedByLength, setIsSortedByLength] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleSortAlphabeticallyClick = () => {\n    if (isSortedAlphabetically) {\n      return;\n    }\n\n    const preparedGoods = [...goodsFromServer];\n\n    if (!isSortedAlphabetically) {\n      preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n    }\n\n    if (isReversed) {\n      preparedGoods.reverse();\n    }\n\n    setIsSortedByLength(false);\n    setIsSortedAlphabetically(true);\n    setSortedList(preparedGoods);\n  };\n\n  const handleSortByLength = () => {\n    if (isSortedByLength) {\n      return;\n    }\n\n    const preparedGoods = [...goodsFromServer];\n\n    if (!isSortedByLength) {\n      preparedGoods.sort((good1, good2) => good1.length - good2.length);\n    }\n\n    if (isReversed) {\n      preparedGoods.reverse();\n    }\n\n    setIsSortedAlphabetically(false);\n    setIsSortedByLength(true);\n    setSortedList(preparedGoods);\n  };\n\n  const handleReverse = () => {\n    const preparedGoods = [...sortedList];\n\n    preparedGoods.reverse();\n    setIsReversed(!isReversed);\n    setSortedList(preparedGoods);\n  };\n\n  const handleReset = () => {\n    setSortedList([...goodsFromServer]);\n\n    setIsSortedAlphabetically(false);\n    setIsSortedByLength(false);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={handleSortAlphabeticallyClick}\n          type=\"button\"\n          className={`button is-info ${!isSortedAlphabetically && 'is-light'}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={handleSortByLength}\n          type=\"button\"\n          className={`button is-success ${!isSortedByLength && 'is-light'}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverse}\n          type=\"button\"\n          className={`button is-warning ${!isReversed && 'is-light'}`}\n        >\n          Reverse\n        </button>\n\n        { isSortedAlphabetically || isSortedByLength || isReversed\n          ? (\n            <button\n              onClick={handleReset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )\n          : null\n        }\n      </div>\n\n      <ul>\n        {sortedList.map(good => (<li data-cy=\"Good\">{good}</li>))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}