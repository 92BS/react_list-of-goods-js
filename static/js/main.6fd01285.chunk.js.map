{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","App","useState","sortedList","setSortedList","sortMethod","setSortMethod","isReversed","setIsReversed","handleSort","method","preparedGoods","sort","good1","good2","localeCompare","length","reverse","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,WACjB,MAAoCC,mBAASF,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAAS,QAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAa,SAACC,GAClB,IAAMC,EAAa,UAAOX,GAE1B,OAAQU,GACN,IAAK,iBACHC,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACzDR,EAAcI,GACd,MAEF,IAAK,WACHC,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAC1DV,EAAcI,GACd,MAEF,QACEJ,EAAc,QAIdC,GACFI,EAAcM,UAGhBb,EAAcO,IAiBhB,OACE,sBAAKO,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMV,EAAW,mBAC1BW,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAA2B,mBAAfhB,IAJhB,iCAUA,wBACEc,QAAS,kBAAMV,EAAW,aAC1BW,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAA2B,aAAfhB,IAJhB,4BAUA,wBACEc,QAtCc,WACpB,IAAMR,EAAa,YAAOR,GAE1BQ,EAAcM,UACdT,GAAeD,GACfH,EAAcO,IAkCRS,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAAad,IAJjB,qBAUgB,SAAfF,GAAyBE,EACxB,wBACEY,QAzCU,WAClBX,GAAc,GACdJ,EAAcJ,GACdM,EAAc,SAuCNc,KAAK,SACLF,UAAU,4BAHZ,mBAOE,QAGN,6BACGf,EAAWmB,KAAI,SAAAC,GAAI,OAAK,oBAAI,UAAQ,OAAZ,SAAoBA,aCzGrDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6fd01285.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const [sortedList, setSortedList] = useState(goodsFromServer);\n  const [sortMethod, setSortMethod] = useState('none');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleSort = (method) => {\n    const preparedGoods = [...goodsFromServer];\n\n    switch (method) {\n      case 'byAlphabetical':\n        preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n        setSortMethod(method);\n        break;\n\n      case 'byLength':\n        preparedGoods.sort((good1, good2) => good1.length - good2.length);\n        setSortMethod(method);\n        break;\n\n      default:\n        setSortMethod('none');\n        break;\n    }\n\n    if (isReversed) {\n      preparedGoods.reverse();\n    }\n\n    setSortedList(preparedGoods);\n  };\n\n  const handleReverse = () => {\n    const preparedGoods = [...sortedList];\n\n    preparedGoods.reverse();\n    setIsReversed(!isReversed);\n    setSortedList(preparedGoods);\n  };\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortedList(goodsFromServer);\n    setSortMethod('none');\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => handleSort('byAlphabetical')}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortMethod !== 'byAlphabetical',\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => handleSort('byLength')}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortMethod !== 'byLength',\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverse}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {sortMethod !== 'none' || isReversed ? (\n          <button\n            onClick={handleReset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        ) : null}\n      </div>\n\n      <ul>\n        {sortedList.map(good => (<li data-cy=\"Good\">{good}</li>))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}